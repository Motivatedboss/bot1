import os
import traceback
import aiohttp
from flask import Flask, request
from dotenv import load_dotenv

from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

load_dotenv()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
flask_app = Flask(__name__)
application = Application.builder().token(TOKEN).build()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state = {}
user_inputs = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_state[user_id] = "name"
    user_inputs[user_id] = {}
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –∞—Å—Ç—Ä–æ–±–æ—Ç üåü\n–î–∞–≤–∞–π —Å–æ—Å—Ç–∞–≤–∏–º —Ç–≤–æ—é –Ω–∞—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É.\n\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    state = user_state.get(user_id)

    if state == "name":
        user_inputs[user_id]["name"] = text
        user_state[user_id] = "birth_date"
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")

    elif state == "birth_date":
        user_inputs[user_id]["birth_date"] = text
        user_state[user_id] = "birth_time"
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –£–∫–∞–∂–∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):")

    elif state == "birth_time":
        user_inputs[user_id]["birth_time"] = text
        user_state[user_id] = "birth_place"
        await update.message.reply_text("–ò –ø–æ—Å–ª–µ–¥–Ω–µ–µ ‚Äî —É–∫–∞–∂–∏ –º–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:")

    elif state == "birth_place":
        user_inputs[user_id]["birth_place"] = text
        user_state[user_id] = "done"
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ì–æ—Ç–æ–≤–ª—é —Ç–≤–æ–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑... üîÆ", reply_markup=ReplyKeyboardRemove())
        await generate_astrology_response(update, context, user_id)

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑.")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter
async def generate_astrology_response(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
    info = user_inputs[user_id]
    prompt = (
        f"–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –°–¥–µ–ª–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –¥–∞–Ω–Ω—ã–º:\n"
        f"–ò–º—è: {info['name']}\n"
        f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {info['birth_date']}\n"
        f"–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {info['birth_time']}\n"
        f"–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {info['birth_place']}\n"
        f"–ü–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ, –∂–∏–∑–Ω–µ–Ω–Ω–æ–º –ø—É—Ç–∏, –ø—Ä–µ–¥—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—è—Ö –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö –¥–ª—è –±—É–¥—É—â–µ–≥–æ."
    )

    try:
        url = "https://openrouter.ai/api/v1/chat/completions"
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://yourdomain.com",
            "X-Title": "AstroBot"
        }
        payload = {
            "model": "meta-llama/llama-3-8b-instruct",
            "messages": [
                {"role": "system", "content": "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥-–±–æ—Ç."},
                {"role": "user", "content": prompt}
            ]
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, json=payload) as resp:
                if resp.status == 200:
                    data = await resp.json()
                    reply_text = data["choices"][0]["message"]["content"]
                else:
                    error = await resp.text()
                    print("–û—à–∏–±–∫–∞ OpenRouter:", error)
                    reply_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter üòî"

    except Exception as e:
        traceback.print_exc()
        reply_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ üò¢"

    await update.message.reply_text(reply_text)

# Webhook
@flask_app.route("/webhook", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.update_queue.put(update)
    return "OK", 200

@flask_app.route("/", methods=["GET"])
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.", 200

# –•–µ–Ω–¥–ª–µ—Ä—ã
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å webhook...")
    application.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 5000)),
        webhook_url=WEBHOOK_URL
    )