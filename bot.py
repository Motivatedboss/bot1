import os
import traceback
import aiohttp
from flask import Flask, request
from dotenv import load_dotenv

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

load_dotenv()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
flask_app = Flask(__name__)

# Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
application = Application.builder().token(TOKEN).build()

# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –¢–µ–º—ã
topics = [
    "1. –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ",
    "2. –¢–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ",
    "3. –§–∏–Ω–∞–Ω—Å—ã",
    "4. –ë–∏–∑–Ω–µ—Å",
    "5. –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ",
    "6. –î–æ—Ö–æ–¥—ã",
    "7. –û—Ç–Ω–æ—à–µ–Ω–∏—è",
    "8. –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
    "9. –ú–µ–Ω—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤—Å—ë",
]

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –∞—Å—Ç—Ä–æ–±–æ—Ç.\n–ù–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id

    if user_id not in user_data:
        user_data[user_id] = text
        reply_keyboard = [[topics[i], topics[i + 1], topics[i + 2]] for i in range(0, len(topics), 3)]
        await update.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–º—É:",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
        )
    else:
        if text in topics:
            selected_topic = text[3:]  # —É–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä
            dob = user_data.get(user_id, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")
            prompt = (
                f"–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–æ–¥–∏–ª—Å—è {dob}. "
                f"–î–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –ø–æ —Ç–µ–º–µ: '{selected_topic}'."
            )

            try:
                url = "https://openrouter.ai/api/v1/chat/completions"
                headers = {
                    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                    "Content-Type": "application/json",
                    "HTTP-Referer": "https://yourdomain.com",  # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–∫–∞–∂–∏ —Å–≤–æ–π —Å–∞–π—Ç
                    "X-Title": "AstroBot"
                }
                payload = {
                    "model": "openai/gpt-3.5-turbo",  # –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –Ω–∞ –ª—é–±—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å OpenRouter
                    "messages": [
                        {"role": "system", "content": "–¢—ã ‚Äî –∞—Å—Ç—Ä–æ–ª–æ–≥-–±–æ—Ç."},
                        {"role": "user", "content": prompt}
                    ]
                }

                async with aiohttp.ClientSession() as session:
                    async with session.post(url, headers=headers, json=payload) as resp:
                        if resp.status == 200:
                            data = await resp.json()
                            reply_text = data["choices"][0]["message"]["content"]
                        else:
                            error = await resp.text()
                            print("–û—à–∏–±–∫–∞ OpenRouter:", error)
                            reply_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenRouter üòî"

            except Exception as e:
                traceback.print_exc()
                reply_text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ üò¢"

            await update.message.reply_text(reply_text)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ç–µ–º—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.")

# Webhook –¥–ª—è Telegram
@flask_app.route("/webhook", methods=["POST"])
def webhook() -> str:
    update = Update.de_json(request.get_json(force=True), application.bot)
    application.update_queue.put(update)
    return "OK", 200

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
@flask_app.route("/", methods=["GET"])
def index() -> str:
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç.", 200

# –•–µ–Ω–¥–ª–µ—Ä—ã
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å webhook...")
    application.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 5000)),
        webhook_url=WEBHOOK_URL
    )